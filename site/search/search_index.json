{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to wiki.gdyu.club This is were info, archives, and resources by and for members of Game Devs @ YorkU are stored and maintained. Open source and always open to Contributions","title":"Home"},{"location":"#welcome-to-wikigdyuclub","text":"This is were info, archives, and resources by and for members of Game Devs @ YorkU are stored and maintained. Open source and always open to Contributions","title":"Welcome to wiki.gdyu.club"},{"location":"archives/","text":"Workshops Unity 3d Game intro #2 November 21st 2023 VOD CODE Unity 3d Game intro #1 November 7th 2023 VOD CODE Godot Pong Workshop October 3 2023 VOD CODE GDYUxCSHUB: Godot intro #2 August 21st 2023 VOD CODE GDYUxCSHUB: Godot intro #1 July 26th 2023 VOD CODE Jard's Blender workshop Nov 26th 2022 VOD Godot Platformer Workshop Jul 22 2022 CODE Community events GDYU TALKS: Fall 2023 Sept 23rd 2023 VOD GDYU TALKS: Summer 2023 August 30th 2023 VOD","title":"Archives"},{"location":"archives/#workshops","text":"","title":"Workshops"},{"location":"archives/#unity-3d-game-intro-2","text":"November 21st 2023 VOD CODE","title":"Unity 3d Game intro #2"},{"location":"archives/#unity-3d-game-intro-1","text":"November 7th 2023 VOD CODE","title":"Unity 3d Game intro #1"},{"location":"archives/#godot-pong-workshop","text":"October 3 2023 VOD CODE","title":"Godot Pong Workshop"},{"location":"archives/#gdyuxcshub-godot-intro-2","text":"August 21st 2023 VOD CODE","title":"GDYUxCSHUB: Godot intro #2"},{"location":"archives/#gdyuxcshub-godot-intro-1","text":"July 26th 2023 VOD CODE","title":"GDYUxCSHUB: Godot intro #1"},{"location":"archives/#jards-blender-workshop","text":"Nov 26th 2022 VOD","title":"Jard's Blender workshop"},{"location":"archives/#godot-platformer-workshop","text":"Jul 22 2022 CODE","title":"Godot Platformer Workshop"},{"location":"archives/#community-events","text":"","title":"Community events"},{"location":"archives/#gdyu-talks-fall-2023","text":"Sept 23rd 2023 VOD","title":"GDYU TALKS: Fall 2023"},{"location":"archives/#gdyu-talks-summer-2023","text":"August 30th 2023 VOD","title":"GDYU TALKS: Summer 2023"},{"location":"dm-resources/","text":"DATT-2300 (Game Development 1) This is where helpful things would go.","title":"DATT-2300 (Game Development 1)"},{"location":"dm-resources/#datt-2300-game-development-1","text":"This is where helpful things would go.","title":"DATT-2300 (Game Development 1)"},{"location":"faq/","text":"Frequently asked questions What is GDYU? GDYU is an acronym for Game Devs @ YorkU. We're York Universities Game development club. What kind of stuff does the club do? We: Maintain a community discord server Host Community events in-person and online Host Workshops to teach about tools and aspects of game development. Where can I find GDYU? Our server is here We also have a club office at the Bergeron Center (Room 102B) Most GDYU members hang around the Berg a lot, you can find us there. How do I join GDYU? You can formally apply to join us through YU Connect , although just joining the server and coming to our events is fine enough. How do I make a game? This answer is a little longer so it get's it's own page","title":"Faq"},{"location":"faq/#frequently-asked-questions","text":"","title":"Frequently asked questions"},{"location":"faq/#what-is-gdyu","text":"GDYU is an acronym for Game Devs @ YorkU. We're York Universities Game development club.","title":"What is GDYU?"},{"location":"faq/#what-kind-of-stuff-does-the-club-do","text":"We: Maintain a community discord server Host Community events in-person and online Host Workshops to teach about tools and aspects of game development.","title":"What kind of stuff does the club do?"},{"location":"faq/#where-can-i-find-gdyu","text":"Our server is here We also have a club office at the Bergeron Center (Room 102B) Most GDYU members hang around the Berg a lot, you can find us there.","title":"Where can I find GDYU?"},{"location":"faq/#how-do-i-join-gdyu","text":"You can formally apply to join us through YU Connect , although just joining the server and coming to our events is fine enough.","title":"How do I join GDYU?"},{"location":"faq/#how-do-i-make-a-game","text":"This answer is a little longer so it get's it's own page","title":"How do I make a game?"},{"location":"makegames/","text":"So you wanna make games Making games is very fun, and not as difficult as it seems. If you're interested in trying game dev out, I (GDYU President Jayden) have tried to make a list of actionable steps, taking advice from people I've seen learn game development as well as my own personal experiences. Step 1: Learn to code. That is, assuming you're working by yourself. Video games are computer software, and somebody at some point needs to write the code that the software is made of (although depending on the tools you use to make the game, more or less programming will be required). This isn't a required step, some people have learned to code though making games, but depending on what you want to make and what you want to use, taking the time to set up a programming foundation outside of game development could be useful. Step 2: Pick something to make games with The software you'll use to develop your game. Pick Godot. If you're a Digital Media student, then you probably have Unity experience already and can stick with that (but should give godot a try). If you want to be a free thinker instead, you can read the rest of this section. Engine or a Library Game Libraries are usually like other libraries/packages that can be installed or maintained on your programming language of choice. They're usually minimal and focus on the fundamental things you'd need to make a game in that programming language, like rendering sprites/models onto a screen, inputs, collisions and entity-component systems. They're simpler, in the sense that you need to understand a lot less of someone else's code, but they take longer to do things, because you need to write a lot more of your own code. It's kind of like driving a manual car. If you aren't into cars (developing game systems, in this simile) then you'd think driving manual is a lot of extra work you don't want to do, and would rather focus on where you're driving (the design/content of the game you're making) You should use a game library if: You really like the language the library is built with. You don't want to learn a completely original system, and enjoy building out systems yourself. You're looking to make small or very lean games. You're interested in learning the fundamentals of game programming and want to know how things work. Game Engines, on the other hand, are large, bespoke software applications designed to make games within. These are what most commercial indie games are made within, and what most people these days use. They come with large sets of common tools, built-in GUI editors and interfaces for all aspects of your game, and lots of plugins to extend functionality. You should use a game engine if: You want to make games as fast as possible. Want to focus on building things specific to your game , not generic systems that lots of games would use. You want to make 3d games (you can make 3d games with a library but... that's rough). You don't mind learning a new system that extends your existing programming skills. A list of our engine and library recommendations is available here And if you still can't decide, then pick godot! Step 3: Learn how to use it You're going to need to find learning resources for whatever engine or library you've picked (tutorial recommendations can be found in the tools section). Although beware of Tutorial Hell , when you've followed enough tutorials to feel like you should be able to make something on your own, but feel lost when it comes to making anything. Those tutorial projects were pretty impressive, but it feels like you haven't learned a thing. Maybe... another tutorial will give you the knowledge you need... And people get stuck here forever. How to avoid tutorial hell Tutorial hell isn't unique to game development, lots of disciplines suffer from the same problem. The issue is that tutorials hold your hand down a pre-determined path, all the decisions were made for you, you're just following them. But a blank project is so vast with potential decisions to make, you're overcome by decision paralysis and don't know how to proceed. The solution is to give yourself the opportunity to practice making your own decisions in a comfortable environment. Expand off your tutorial projects. Add a new enemy or projectile or collectable or level or mechanic. Take what you had made and modify it, add to it, break it, practice solving things on your own. Anyway you should have a good enough foundation in whatever engine you chose to move onto making your own stuff. Time to make your dream game right? Step 4: Learn how to finish your projects Most beginners start with lofty ambitions of a \"dream game\", the one that motivated them to learn how to make games in the first place. However most of the time these projects are generally out of scope for a beginner like yourself. If you'd like to get to that dream game at some point, that's great, but you're going to have to learn the hardest part of game development first, finishing your projects. You're going to make the smallest game you possibly can, set a timer for 2 hours, and make a little game. With what you know, pick something you think you could get done in that time. After that try and scope out a bit. Join a 48 hour game jam (an event where developers make a game, usually in 48 hours) or just pick a weekend you're free, and try to make another game. You can repeat this method as your games get larger in scope, going to 1 week -> 2 weeks -> a month, and sometimes returning to a shorter span if you're participating in a game jam. This will make you really good at finishing your projects. Now about that dream game of yours. I have no idea what it is so I can't really tell you if you'll ever be able to make it or not, but after following the above exercise you should be much better equipped to assess the feasibility of your project, and what it'll take to make it. Your dream game can also be split into separate parts and each piece can be learned in it's own project. If you'd like to make a farming simulator, you'd need to learn about crop growing, simulating markets, inventory management, building out a farm, things that can all be their own separate little games. to find jams, check out the resources So get to making games!!!","title":"How to make games"},{"location":"makegames/#so-you-wanna-make-games","text":"Making games is very fun, and not as difficult as it seems. If you're interested in trying game dev out, I (GDYU President Jayden) have tried to make a list of actionable steps, taking advice from people I've seen learn game development as well as my own personal experiences.","title":"So you wanna make games"},{"location":"makegames/#step-1-learn-to-code","text":"That is, assuming you're working by yourself. Video games are computer software, and somebody at some point needs to write the code that the software is made of (although depending on the tools you use to make the game, more or less programming will be required). This isn't a required step, some people have learned to code though making games, but depending on what you want to make and what you want to use, taking the time to set up a programming foundation outside of game development could be useful.","title":"Step 1: Learn to code."},{"location":"makegames/#step-2-pick-something-to-make-games-with","text":"The software you'll use to develop your game. Pick Godot. If you're a Digital Media student, then you probably have Unity experience already and can stick with that (but should give godot a try). If you want to be a free thinker instead, you can read the rest of this section.","title":"Step 2: Pick something to make games with"},{"location":"makegames/#engine-or-a-library","text":"Game Libraries are usually like other libraries/packages that can be installed or maintained on your programming language of choice. They're usually minimal and focus on the fundamental things you'd need to make a game in that programming language, like rendering sprites/models onto a screen, inputs, collisions and entity-component systems. They're simpler, in the sense that you need to understand a lot less of someone else's code, but they take longer to do things, because you need to write a lot more of your own code. It's kind of like driving a manual car. If you aren't into cars (developing game systems, in this simile) then you'd think driving manual is a lot of extra work you don't want to do, and would rather focus on where you're driving (the design/content of the game you're making) You should use a game library if: You really like the language the library is built with. You don't want to learn a completely original system, and enjoy building out systems yourself. You're looking to make small or very lean games. You're interested in learning the fundamentals of game programming and want to know how things work. Game Engines, on the other hand, are large, bespoke software applications designed to make games within. These are what most commercial indie games are made within, and what most people these days use. They come with large sets of common tools, built-in GUI editors and interfaces for all aspects of your game, and lots of plugins to extend functionality. You should use a game engine if: You want to make games as fast as possible. Want to focus on building things specific to your game , not generic systems that lots of games would use. You want to make 3d games (you can make 3d games with a library but... that's rough). You don't mind learning a new system that extends your existing programming skills. A list of our engine and library recommendations is available here And if you still can't decide, then pick godot!","title":"Engine or a Library"},{"location":"makegames/#step-3-learn-how-to-use-it","text":"You're going to need to find learning resources for whatever engine or library you've picked (tutorial recommendations can be found in the tools section). Although beware of Tutorial Hell , when you've followed enough tutorials to feel like you should be able to make something on your own, but feel lost when it comes to making anything. Those tutorial projects were pretty impressive, but it feels like you haven't learned a thing. Maybe... another tutorial will give you the knowledge you need... And people get stuck here forever.","title":"Step 3: Learn how to use it"},{"location":"makegames/#how-to-avoid-tutorial-hell","text":"Tutorial hell isn't unique to game development, lots of disciplines suffer from the same problem. The issue is that tutorials hold your hand down a pre-determined path, all the decisions were made for you, you're just following them. But a blank project is so vast with potential decisions to make, you're overcome by decision paralysis and don't know how to proceed. The solution is to give yourself the opportunity to practice making your own decisions in a comfortable environment. Expand off your tutorial projects. Add a new enemy or projectile or collectable or level or mechanic. Take what you had made and modify it, add to it, break it, practice solving things on your own. Anyway you should have a good enough foundation in whatever engine you chose to move onto making your own stuff. Time to make your dream game right?","title":"How to avoid tutorial hell"},{"location":"makegames/#step-4-learn-how-to-finish-your-projects","text":"Most beginners start with lofty ambitions of a \"dream game\", the one that motivated them to learn how to make games in the first place. However most of the time these projects are generally out of scope for a beginner like yourself. If you'd like to get to that dream game at some point, that's great, but you're going to have to learn the hardest part of game development first, finishing your projects. You're going to make the smallest game you possibly can, set a timer for 2 hours, and make a little game. With what you know, pick something you think you could get done in that time. After that try and scope out a bit. Join a 48 hour game jam (an event where developers make a game, usually in 48 hours) or just pick a weekend you're free, and try to make another game. You can repeat this method as your games get larger in scope, going to 1 week -> 2 weeks -> a month, and sometimes returning to a shorter span if you're participating in a game jam. This will make you really good at finishing your projects. Now about that dream game of yours. I have no idea what it is so I can't really tell you if you'll ever be able to make it or not, but after following the above exercise you should be much better equipped to assess the feasibility of your project, and what it'll take to make it. Your dream game can also be split into separate parts and each piece can be learned in it's own project. If you'd like to make a farming simulator, you'd need to learn about crop growing, simulating markets, inventory management, building out a farm, things that can all be their own separate little games. to find jams, check out the resources So get to making games!!!","title":"Step 4: Learn how to finish your projects"},{"location":"tools/","text":"Tools to make games I had simply linked to the magic tools repo , and though that would suffice for an exhaustive list (exhaustive it sure is), but I think a list curated by GDYU members would be a lot less intimidating, and would allow members to make more informed decisions. If none of the tools here suit your needs, check out the magic tools repo Don't see your favorite tool here? Add it! Generic Learning Resources Things to teach you general concepts not specific to any one tool or language. Video Game Programming Patterns A great book about data structures, and programming patterns commonly used to build good codebases. Amit's Game Programming information Webpage filled with a collection of other game development resources 20 Games Challenge a site with 10 game ideas that increase in complexity. Good list to work through if you're learning a new tool or want to practice making things without following tutorials Game Engines Godot Free and open source 2D/3D Game Engine. Everyone's new best friend, it's the most feature complete open source game engine. Language Support: GDScript (it's like python), C#,C++/C or Anything if you're motivated enough Learning Resources: Offical Intro Tutorial GDQuest Unity Free 2D/3D Game Engine Everything is made in this one. Well not everything , but if it's an indie game from the last 15 years there's like a 80% chance it was made in Unity (Although that might change due to what's happened recently ) Language support: C# (or any .NET language) Learning Resources 2D flappy bird clone: https://youtu.be/XtQMytORBmM?si=RIUQkkHzaOzhPOYr 3D first person shooter: https://youtu.be/gPPGnpV1Y1c?si=wflMZ7ZhNqg2U33E Then there are just YT channels in general that have lots of good tutorial content. https://www.youtube.com/@CodeMonkeyUnity https://www.youtube.com/@GMTK https://www.youtube.com/@samyam https://www.youtube.com/@Brackeys (Stopped making videos but known as the Unity tutorial god) https://www.youtube.com/@SamHogan https://www.youtube.com/@Blackthornprod Unreal Free 3d game engine (you can also do 2d in it, but it's not designed for it and it's kinda overkill) It's a big boy for big games, you've definitely seen the unreal engine logo in front of some major AAA video games. It's huge and demands a beefy computer, but if you're really looking for Big Graphics , this is the engine for that. Learning Resources someone fill this out! Game Libraries Genre-specific Game Engines/Libraries Finding 2d art OpenGameart.org Free and Generally open source art assets. Making 2d art Aseprite Very good pixel art software Not free, but comes with a trial version, (although with a little effort and a C compiler you can build it from the source code .) But buy it if you can. Learning Resources someone fill this out! Finding 3d art OpenGameart.org Free and Generally open source art assets. Making 3d art Blender Free and open source 3d Modeling software. If you're interested in 3d you've certainly heard of it before. Learning Resources someone fill this out! Finding audio OpenGameart.org - Free and Generally open source art assets. Making audio Writing Game Narratives Organizing your project","title":"Tools"},{"location":"tools/#tools-to-make-games","text":"I had simply linked to the magic tools repo , and though that would suffice for an exhaustive list (exhaustive it sure is), but I think a list curated by GDYU members would be a lot less intimidating, and would allow members to make more informed decisions. If none of the tools here suit your needs, check out the magic tools repo Don't see your favorite tool here? Add it!","title":"Tools to make games"},{"location":"tools/#generic-learning-resources","text":"Things to teach you general concepts not specific to any one tool or language.","title":"Generic Learning Resources"},{"location":"tools/#video-game-programming-patterns","text":"A great book about data structures, and programming patterns commonly used to build good codebases.","title":"Video Game Programming Patterns"},{"location":"tools/#amits-game-programming-information","text":"Webpage filled with a collection of other game development resources","title":"Amit's Game Programming information"},{"location":"tools/#20-games-challenge","text":"a site with 10 game ideas that increase in complexity. Good list to work through if you're learning a new tool or want to practice making things without following tutorials","title":"20 Games Challenge"},{"location":"tools/#game-engines","text":"","title":"Game Engines"},{"location":"tools/#godot","text":"Free and open source 2D/3D Game Engine. Everyone's new best friend, it's the most feature complete open source game engine. Language Support: GDScript (it's like python), C#,C++/C or Anything if you're motivated enough","title":"Godot"},{"location":"tools/#learning-resources","text":"Offical Intro Tutorial GDQuest","title":"Learning Resources:"},{"location":"tools/#unity","text":"Free 2D/3D Game Engine Everything is made in this one. Well not everything , but if it's an indie game from the last 15 years there's like a 80% chance it was made in Unity (Although that might change due to what's happened recently ) Language support: C# (or any .NET language)","title":"Unity"},{"location":"tools/#learning-resources_1","text":"2D flappy bird clone: https://youtu.be/XtQMytORBmM?si=RIUQkkHzaOzhPOYr 3D first person shooter: https://youtu.be/gPPGnpV1Y1c?si=wflMZ7ZhNqg2U33E Then there are just YT channels in general that have lots of good tutorial content. https://www.youtube.com/@CodeMonkeyUnity https://www.youtube.com/@GMTK https://www.youtube.com/@samyam https://www.youtube.com/@Brackeys (Stopped making videos but known as the Unity tutorial god) https://www.youtube.com/@SamHogan https://www.youtube.com/@Blackthornprod","title":"Learning Resources"},{"location":"tools/#unreal","text":"Free 3d game engine (you can also do 2d in it, but it's not designed for it and it's kinda overkill) It's a big boy for big games, you've definitely seen the unreal engine logo in front of some major AAA video games. It's huge and demands a beefy computer, but if you're really looking for Big Graphics , this is the engine for that.","title":"Unreal"},{"location":"tools/#learning-resources_2","text":"someone fill this out!","title":"Learning Resources"},{"location":"tools/#game-libraries","text":"","title":"Game Libraries"},{"location":"tools/#genre-specific-game-engineslibraries","text":"","title":"Genre-specific Game Engines/Libraries"},{"location":"tools/#finding-2d-art","text":"","title":"Finding 2d art"},{"location":"tools/#opengameartorg","text":"Free and Generally open source art assets.","title":"OpenGameart.org"},{"location":"tools/#making-2d-art","text":"","title":"Making 2d art"},{"location":"tools/#aseprite","text":"Very good pixel art software Not free, but comes with a trial version, (although with a little effort and a C compiler you can build it from the source code .) But buy it if you can.","title":"Aseprite"},{"location":"tools/#learning-resources_3","text":"someone fill this out!","title":"Learning Resources"},{"location":"tools/#finding-3d-art","text":"","title":"Finding 3d art"},{"location":"tools/#opengameartorg_1","text":"Free and Generally open source art assets.","title":"OpenGameart.org"},{"location":"tools/#making-3d-art","text":"","title":"Making 3d art"},{"location":"tools/#blender","text":"Free and open source 3d Modeling software. If you're interested in 3d you've certainly heard of it before.","title":"Blender"},{"location":"tools/#learning-resources_4","text":"someone fill this out!","title":"Learning Resources"},{"location":"tools/#finding-audio","text":"OpenGameart.org - Free and Generally open source art assets.","title":"Finding audio"},{"location":"tools/#making-audio","text":"","title":"Making audio"},{"location":"tools/#writing-game-narratives","text":"","title":"Writing Game Narratives"},{"location":"tools/#organizing-your-project","text":"","title":"Organizing your project"}]}